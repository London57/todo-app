// Code generated by MockGen. DO NOT EDIT.
// Source: signup.go

// Package mock_signup is a generated GoMock package.
package mock_signup

import (
	context "context"
	reflect "reflect"

	domain "github.com/London57/todo-app/internal/domain"
	signup "github.com/London57/todo-app/internal/transport/signup"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockSignUpUseCase is a mock of SignUpUseCase interface.
type MockSignUpUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSignUpUseCaseMockRecorder
}

// MockSignUpUseCaseMockRecorder is the mock recorder for MockSignUpUseCase.
type MockSignUpUseCaseMockRecorder struct {
	mock *MockSignUpUseCase
}

// NewMockSignUpUseCase creates a new mock instance.
func NewMockSignUpUseCase(ctrl *gomock.Controller) *MockSignUpUseCase {
	mock := &MockSignUpUseCase{ctrl: ctrl}
	mock.recorder = &MockSignUpUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignUpUseCase) EXPECT() *MockSignUpUseCaseMockRecorder {
	return m.recorder
}

// CreateAccessToken mocks base method.
func (m *MockSignUpUseCase) CreateAccessToken(arg0 domain.User, arg1 string, arg2 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessToken indicates an expected call of CreateAccessToken.
func (mr *MockSignUpUseCaseMockRecorder) CreateAccessToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessToken", reflect.TypeOf((*MockSignUpUseCase)(nil).CreateAccessToken), arg0, arg1, arg2)
}

// CreateRefreshToken mocks base method.
func (m *MockSignUpUseCase) CreateRefreshToken(arg0 domain.User, arg1 string, arg2 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefreshToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRefreshToken indicates an expected call of CreateRefreshToken.
func (mr *MockSignUpUseCaseMockRecorder) CreateRefreshToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefreshToken", reflect.TypeOf((*MockSignUpUseCase)(nil).CreateRefreshToken), arg0, arg1, arg2)
}

// CreateUser mocks base method.
func (m *MockSignUpUseCase) CreateUser(arg0 context.Context, arg1 signup.SignUpRequest) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockSignUpUseCaseMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockSignUpUseCase)(nil).CreateUser), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockSignUpUseCase) GetUserByEmail(arg0 context.Context, arg1 string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockSignUpUseCaseMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockSignUpUseCase)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockSignUpUseCase) GetUserByUsername(arg0 context.Context, arg1 string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockSignUpUseCaseMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockSignUpUseCase)(nil).GetUserByUsername), arg0, arg1)
}
